class Solution:
    def isValid(self, s: str) -> bool:
        bracket_map = {')': '(', ']': '[', '}': '{'}
        
        # Stack to hold opening brackets
        stack = []

        # Loop through each character in the string
        for char in s:
            # If it's a closing bracket
            if char in bracket_map:
                # Pop from stack if not empty, else assign dummy
                top_element = stack.pop() if stack else '#'

                # Check if the top matches the expected opening bracket
                if bracket_map[char] != top_element:
                    return False
            else:
                # If it's an opening bracket, push to stack
                stack.append(char)

        # If stack is empty, all brackets matched correctly
        return not stack